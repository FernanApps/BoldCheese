from turtle import *
import random
import math
import turtle
import base64
import time

colors = ["#042783", "#0581d5", "#040f41", "#32b0e8", "#044ab5", "#6ebae3", "#05448a", "#3da0d5"]
background_color = "#001529"
header_color = "white"

header_text_enc = "UXVlc2l0byBBdHJldmlkbyAh"
header_text = base64.b64decode(header_text_enc).decode()


def clean_screen():   
    window = turtle.Screen()
    window.clear()
        
    
def machine_writing(text, color="black", time_sleep = 0.1, pos_x = -150, pos_y = 0, step_space = 12*3, font=("Verdana", 8, "normal")):
    t = turtle.Turtle()
    t.penup()
    t.goto(pos_x, pos_y)
    t.pendown()
    t.color(color) 
    
    for letra in text:
        t.write(letra, move=False, font=font)
        t.penup()
        t.forward(step_space)
        t.pendown()
    time.sleep(time_sleep)     
     
    


def center_text_horizontal(text, font=("Verdana", 12, "normal")):
    t = turtle.Turtle()
    t.penup()
    t.hideturtle()
    t.setposition(0, 0)
    t.color(background_color) 
    t.write(text, align="center", font=font)
    x, _ = t.position()
    return x


def pick_color():
    random.shuffle(colors)
    return colors[0]

def draw_petals():
    h = 0
    penup()
    goto(0, -40)
    pendown()
    for i in range(16):
        for j in range(18):
            color(pick_color())
            h += 0.005
            rt(90)
            circle(150 - j * 6, 90)
            lt(90)
            circle(150 - j * 6, 90)
            rt(180)
        circle(40, 24)


def draw_phyll_pattern(turtle, t, petalstart, angle=137.5077641, size=15, cspread=5):
    phi = angle * (math.pi / 180.0)
    xcenter = 0.0
    ycenter = 0.0

    for n in range(0, t):
        if n<=50:
            turtle.fillcolor("mediumpurple3")
        elif n>50 and n<=150:
            turtle.fillcolor("royal blue")
        elif n>150 and n<200:
            turtle.fillcolor("medium slate blue")
        r = cspread * math.sqrt(n)
        theta = n * phi
        x = r * math.cos(theta) + xcenter
        y = r * math.sin(theta) + ycenter
        turtle.up()
        turtle.setpos(x, y)
        turtle.down()
        turtle.setheading(n * angle)
        if n > petalstart - 1:
            #drawPetal(turtle, x, y)
            print("")
        else:
            turtle.stamp()
            

window = turtle.Screen()
window.bgcolor(background_color)



clean_screen()

turtle.color(header_color) 


machine_writing(text = "Flores", time_sleep = 0.2)
machine_writing(text = "Amarillas ?", pos_y = -30, time_sleep = 0.2)
time.sleep(0.6)
clean_screen()

machine_writing(text = "Ummm...", time_sleep = 0.2)
time.sleep(0.5)
clean_screen()

machine_writing(text = "Seamos,", time_sleep = 0.2)
machine_writing(text = "un poco", pos_y = -35, time_sleep = 0.2)
machine_writing(text = "Rebeldes y ", pos_y = -120, time_sleep = 0.2)
machine_writing(text = "Diferentes ...", pos_y = -155, time_sleep = 0.2)

time.sleep(0.6)
clean_screen()



#machine_writing(text = header_text, time_sleep = 0.2)
#turtle.delay(2000) 
#clean_screen()


header_font = ("Verdana", 10, "normal")
#x = center_text_horizontal(header_text, font=header_font)
#y = 235
turtle.penup()
turtle.color(header_color) 
#turtle.goto(x, y)
turtle.pendown()
#turtle.write(header_text, align="center", font=header_font)

speed(20)
bgcolor(background_color)   
    
    
t = turtle.Turtle()
t.shape("circle")
t.shapesize(0.3)
window=turtle.Screen()
t.speed("fastest")
draw_phyll_pattern(t, 250, 200, 137.5077641, size = 50, cspread = 2.8)
t.penup()

t.speed("fastest")
draw_petals()


machine_writing(text = "Las flores azules son enigmáticas,", color="white", time_sleep = 0.2, pos_x = -250, pos_y= -250,font=("Trebuchet MS", 5, "normal"))
machine_writing(text = "misteriosas. Al ser un tono fresco,", color="white", time_sleep = 0.2, pos_x = -250, pos_y= -285,font=("Trebuchet MS", 5, "normal"))
machine_writing(text = "y relajante, se relacionan con la,", color="white", time_sleep = 0.2, pos_x = -250, pos_y= -315,font=("Trebuchet MS", 5, "normal"))
machine_writing(text = "tranquilidad, profundidad y pureza,", color="white", time_sleep = 0.2, pos_x = -250, pos_y= -340,font=("Trebuchet MS", 5, "normal"))


turtle.mainloop()

done()